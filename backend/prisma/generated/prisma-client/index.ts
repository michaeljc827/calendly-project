// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  attendee: (where?: AttendeeWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  meeting: (where?: MeetingWhereInput) => Promise<boolean>;
  reservation: (where?: ReservationWhereInput) => Promise<boolean>;
  staff: (where?: StaffWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attendee: (where: AttendeeWhereUniqueInput) => AttendeeNullablePromise;
  attendees: (args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attendee>;
  attendeesConnection: (args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttendeeConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  meeting: (where: MeetingWhereUniqueInput) => MeetingNullablePromise;
  meetings: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meeting>;
  meetingsConnection: (args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeetingConnectionPromise;
  reservation: (
    where: ReservationWhereUniqueInput
  ) => ReservationNullablePromise;
  reservations: (args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Reservation>;
  reservationsConnection: (args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReservationConnectionPromise;
  staff: (where: StaffWhereUniqueInput) => StaffNullablePromise;
  staffs: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Staff>;
  staffsConnection: (args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StaffConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttendee: (data: AttendeeCreateInput) => AttendeePromise;
  updateAttendee: (args: {
    data: AttendeeUpdateInput;
    where: AttendeeWhereUniqueInput;
  }) => AttendeePromise;
  updateManyAttendees: (args: {
    data: AttendeeUpdateManyMutationInput;
    where?: AttendeeWhereInput;
  }) => BatchPayloadPromise;
  upsertAttendee: (args: {
    where: AttendeeWhereUniqueInput;
    create: AttendeeCreateInput;
    update: AttendeeUpdateInput;
  }) => AttendeePromise;
  deleteAttendee: (where: AttendeeWhereUniqueInput) => AttendeePromise;
  deleteManyAttendees: (where?: AttendeeWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createMeeting: (data: MeetingCreateInput) => MeetingPromise;
  updateMeeting: (args: {
    data: MeetingUpdateInput;
    where: MeetingWhereUniqueInput;
  }) => MeetingPromise;
  updateManyMeetings: (args: {
    data: MeetingUpdateManyMutationInput;
    where?: MeetingWhereInput;
  }) => BatchPayloadPromise;
  upsertMeeting: (args: {
    where: MeetingWhereUniqueInput;
    create: MeetingCreateInput;
    update: MeetingUpdateInput;
  }) => MeetingPromise;
  deleteMeeting: (where: MeetingWhereUniqueInput) => MeetingPromise;
  deleteManyMeetings: (where?: MeetingWhereInput) => BatchPayloadPromise;
  createReservation: (data: ReservationCreateInput) => ReservationPromise;
  updateReservation: (args: {
    data: ReservationUpdateInput;
    where: ReservationWhereUniqueInput;
  }) => ReservationPromise;
  updateManyReservations: (args: {
    data: ReservationUpdateManyMutationInput;
    where?: ReservationWhereInput;
  }) => BatchPayloadPromise;
  upsertReservation: (args: {
    where: ReservationWhereUniqueInput;
    create: ReservationCreateInput;
    update: ReservationUpdateInput;
  }) => ReservationPromise;
  deleteReservation: (where: ReservationWhereUniqueInput) => ReservationPromise;
  deleteManyReservations: (
    where?: ReservationWhereInput
  ) => BatchPayloadPromise;
  createStaff: (data: StaffCreateInput) => StaffPromise;
  updateStaff: (args: {
    data: StaffUpdateInput;
    where: StaffWhereUniqueInput;
  }) => StaffPromise;
  updateManyStaffs: (args: {
    data: StaffUpdateManyMutationInput;
    where?: StaffWhereInput;
  }) => BatchPayloadPromise;
  upsertStaff: (args: {
    where: StaffWhereUniqueInput;
    create: StaffCreateInput;
    update: StaffUpdateInput;
  }) => StaffPromise;
  deleteStaff: (where: StaffWhereUniqueInput) => StaffPromise;
  deleteManyStaffs: (where?: StaffWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attendee: (
    where?: AttendeeSubscriptionWhereInput
  ) => AttendeeSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  meeting: (
    where?: MeetingSubscriptionWhereInput
  ) => MeetingSubscriptionPayloadSubscription;
  reservation: (
    where?: ReservationSubscriptionWhereInput
  ) => ReservationSubscriptionPayloadSubscription;
  staff: (
    where?: StaffSubscriptionWhereInput
  ) => StaffSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReservationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "timeSlot_ASC"
  | "timeSlot_DESC";

export type MeetingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "location_ASC"
  | "location_DESC";

export type StaffOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC";

export type AttendeeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC";

export type EventOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AttendeeUpdateWithWhereUniqueNestedInput {
  where: AttendeeWhereUniqueInput;
  data: AttendeeUpdateDataInput;
}

export type AttendeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AttendeeUpdateManyWithWhereNestedInput {
  where: AttendeeScalarWhereInput;
  data: AttendeeUpdateManyDataInput;
}

export interface StaffWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  meetings_every?: Maybe<MeetingWhereInput>;
  meetings_some?: Maybe<MeetingWhereInput>;
  meetings_none?: Maybe<MeetingWhereInput>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<StaffWhereInput[] | StaffWhereInput>;
  OR?: Maybe<StaffWhereInput[] | StaffWhereInput>;
  NOT?: Maybe<StaffWhereInput[] | StaffWhereInput>;
}

export interface MeetingUpdateOneRequiredWithoutReservationsInput {
  create?: Maybe<MeetingCreateWithoutReservationsInput>;
  update?: Maybe<MeetingUpdateWithoutReservationsDataInput>;
  upsert?: Maybe<MeetingUpsertWithoutReservationsInput>;
  connect?: Maybe<MeetingWhereUniqueInput>;
}

export interface ReservationUpsertWithWhereUniqueWithoutMeetingInput {
  where: ReservationWhereUniqueInput;
  update: ReservationUpdateWithoutMeetingDataInput;
  create: ReservationCreateWithoutMeetingInput;
}

export interface MeetingUpdateWithoutReservationsDataInput {
  name?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutMeetingsInput>;
  location?: Maybe<String>;
  staff?: Maybe<StaffUpdateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeUpdateManyInput>;
}

export interface AttendeeUpdateManyDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface EventUpdateOneRequiredWithoutMeetingsInput {
  create?: Maybe<EventCreateWithoutMeetingsInput>;
  update?: Maybe<EventUpdateWithoutMeetingsDataInput>;
  upsert?: Maybe<EventUpsertWithoutMeetingsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface ReservationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReservationWhereInput>;
  AND?: Maybe<
    ReservationSubscriptionWhereInput[] | ReservationSubscriptionWhereInput
  >;
  OR?: Maybe<
    ReservationSubscriptionWhereInput[] | ReservationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ReservationSubscriptionWhereInput[] | ReservationSubscriptionWhereInput
  >;
}

export interface EventUpdateWithoutMeetingsDataInput {
  name?: Maybe<String>;
}

export interface AttendeeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  reservations_every?: Maybe<ReservationWhereInput>;
  reservations_some?: Maybe<ReservationWhereInput>;
  reservations_none?: Maybe<ReservationWhereInput>;
  AND?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
  OR?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
  NOT?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
}

export interface EventUpsertWithoutMeetingsInput {
  update: EventUpdateWithoutMeetingsDataInput;
  create: EventCreateWithoutMeetingsInput;
}

export interface ReservationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  attendee?: Maybe<AttendeeWhereInput>;
  meeting?: Maybe<MeetingWhereInput>;
  timeSlot?: Maybe<String>;
  timeSlot_not?: Maybe<String>;
  timeSlot_in?: Maybe<String[] | String>;
  timeSlot_not_in?: Maybe<String[] | String>;
  timeSlot_lt?: Maybe<String>;
  timeSlot_lte?: Maybe<String>;
  timeSlot_gt?: Maybe<String>;
  timeSlot_gte?: Maybe<String>;
  timeSlot_contains?: Maybe<String>;
  timeSlot_not_contains?: Maybe<String>;
  timeSlot_starts_with?: Maybe<String>;
  timeSlot_not_starts_with?: Maybe<String>;
  timeSlot_ends_with?: Maybe<String>;
  timeSlot_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReservationWhereInput[] | ReservationWhereInput>;
  OR?: Maybe<ReservationWhereInput[] | ReservationWhereInput>;
  NOT?: Maybe<ReservationWhereInput[] | ReservationWhereInput>;
}

export interface StaffUpdateManyWithoutMeetingsInput {
  create?: Maybe<
    StaffCreateWithoutMeetingsInput[] | StaffCreateWithoutMeetingsInput
  >;
  delete?: Maybe<StaffWhereUniqueInput[] | StaffWhereUniqueInput>;
  connect?: Maybe<StaffWhereUniqueInput[] | StaffWhereUniqueInput>;
  set?: Maybe<StaffWhereUniqueInput[] | StaffWhereUniqueInput>;
  disconnect?: Maybe<StaffWhereUniqueInput[] | StaffWhereUniqueInput>;
  update?: Maybe<
    | StaffUpdateWithWhereUniqueWithoutMeetingsInput[]
    | StaffUpdateWithWhereUniqueWithoutMeetingsInput
  >;
  upsert?: Maybe<
    | StaffUpsertWithWhereUniqueWithoutMeetingsInput[]
    | StaffUpsertWithWhereUniqueWithoutMeetingsInput
  >;
  deleteMany?: Maybe<StaffScalarWhereInput[] | StaffScalarWhereInput>;
  updateMany?: Maybe<
    StaffUpdateManyWithWhereNestedInput[] | StaffUpdateManyWithWhereNestedInput
  >;
}

export interface AttendeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttendeeWhereInput>;
  AND?: Maybe<
    AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput
  >;
  OR?: Maybe<AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput>;
  NOT?: Maybe<
    AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput
  >;
}

export interface StaffUpdateWithWhereUniqueWithoutMeetingsInput {
  where: StaffWhereUniqueInput;
  data: StaffUpdateWithoutMeetingsDataInput;
}

export interface MeetingUpsertWithWhereUniqueWithoutStaffInput {
  where: MeetingWhereUniqueInput;
  update: MeetingUpdateWithoutStaffDataInput;
  create: MeetingCreateWithoutStaffInput;
}

export interface StaffUpdateWithoutMeetingsDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StaffUpsertWithWhereUniqueWithoutMeetingsInput {
  where: StaffWhereUniqueInput;
  update: StaffUpdateWithoutMeetingsDataInput;
  create: StaffCreateWithoutMeetingsInput;
}

export interface MeetingUpdateManyWithoutStaffInput {
  create?: Maybe<
    MeetingCreateWithoutStaffInput[] | MeetingCreateWithoutStaffInput
  >;
  delete?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  set?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  disconnect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  update?: Maybe<
    | MeetingUpdateWithWhereUniqueWithoutStaffInput[]
    | MeetingUpdateWithWhereUniqueWithoutStaffInput
  >;
  upsert?: Maybe<
    | MeetingUpsertWithWhereUniqueWithoutStaffInput[]
    | MeetingUpsertWithWhereUniqueWithoutStaffInput
  >;
  deleteMany?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  updateMany?: Maybe<
    | MeetingUpdateManyWithWhereNestedInput[]
    | MeetingUpdateManyWithWhereNestedInput
  >;
}

export interface StaffScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<StaffScalarWhereInput[] | StaffScalarWhereInput>;
  OR?: Maybe<StaffScalarWhereInput[] | StaffScalarWhereInput>;
  NOT?: Maybe<StaffScalarWhereInput[] | StaffScalarWhereInput>;
}

export interface MeetingCreateWithoutStaffInput {
  id?: Maybe<ID_Input>;
  name: String;
  event: EventCreateOneWithoutMeetingsInput;
  location: String;
  attendees?: Maybe<AttendeeCreateManyInput>;
  reservations?: Maybe<ReservationCreateManyWithoutMeetingInput>;
}

export interface StaffUpdateManyWithWhereNestedInput {
  where: StaffScalarWhereInput;
  data: StaffUpdateManyDataInput;
}

export interface MeetingCreateManyWithoutStaffInput {
  create?: Maybe<
    MeetingCreateWithoutStaffInput[] | MeetingCreateWithoutStaffInput
  >;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
}

export interface StaffUpdateManyDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}

export interface ReservationUpdateManyMutationInput {
  timeSlot?: Maybe<String>;
}

export interface AttendeeUpdateManyInput {
  create?: Maybe<AttendeeCreateInput[] | AttendeeCreateInput>;
  update?: Maybe<
    | AttendeeUpdateWithWhereUniqueNestedInput[]
    | AttendeeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AttendeeUpsertWithWhereUniqueNestedInput[]
    | AttendeeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AttendeeWhereUniqueInput[] | AttendeeWhereUniqueInput>;
  connect?: Maybe<AttendeeWhereUniqueInput[] | AttendeeWhereUniqueInput>;
  set?: Maybe<AttendeeWhereUniqueInput[] | AttendeeWhereUniqueInput>;
  disconnect?: Maybe<AttendeeWhereUniqueInput[] | AttendeeWhereUniqueInput>;
  deleteMany?: Maybe<AttendeeScalarWhereInput[] | AttendeeScalarWhereInput>;
  updateMany?: Maybe<
    | AttendeeUpdateManyWithWhereNestedInput[]
    | AttendeeUpdateManyWithWhereNestedInput
  >;
}

export interface ReservationUpdateInput {
  attendee?: Maybe<AttendeeUpdateOneRequiredWithoutReservationsInput>;
  meeting?: Maybe<MeetingUpdateOneRequiredWithoutReservationsInput>;
  timeSlot?: Maybe<String>;
}

export interface MeetingUpdateManyDataInput {
  name?: Maybe<String>;
  location?: Maybe<String>;
}

export interface MeetingUpdateManyMutationInput {
  name?: Maybe<String>;
  location?: Maybe<String>;
}

export interface AttendeeUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  reservations?: Maybe<ReservationUpdateManyWithoutAttendeeInput>;
}

export interface MeetingUpdateInput {
  name?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutMeetingsInput>;
  location?: Maybe<String>;
  staff?: Maybe<StaffUpdateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeUpdateManyInput>;
  reservations?: Maybe<ReservationUpdateManyWithoutMeetingInput>;
}

export interface AttendeeUpsertWithWhereUniqueNestedInput {
  where: AttendeeWhereUniqueInput;
  update: AttendeeUpdateDataInput;
  create: AttendeeCreateInput;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface AttendeeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<AttendeeScalarWhereInput[] | AttendeeScalarWhereInput>;
  OR?: Maybe<AttendeeScalarWhereInput[] | AttendeeScalarWhereInput>;
  NOT?: Maybe<AttendeeScalarWhereInput[] | AttendeeScalarWhereInput>;
}

export interface AttendeeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  reservations?: Maybe<ReservationCreateManyWithoutAttendeeInput>;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  meetings_every?: Maybe<MeetingWhereInput>;
  meetings_some?: Maybe<MeetingWhereInput>;
  meetings_none?: Maybe<MeetingWhereInput>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface ReservationCreateWithoutAttendeeInput {
  id?: Maybe<ID_Input>;
  meeting: MeetingCreateOneWithoutReservationsInput;
  timeSlot: String;
}

export interface MeetingUpdateManyWithWhereNestedInput {
  where: MeetingScalarWhereInput;
  data: MeetingUpdateManyDataInput;
}

export interface MeetingCreateWithoutReservationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  event: EventCreateOneWithoutMeetingsInput;
  location: String;
  staff?: Maybe<StaffCreateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeCreateManyInput>;
}

export interface MeetingUpsertWithoutReservationsInput {
  update: MeetingUpdateWithoutReservationsDataInput;
  create: MeetingCreateWithoutReservationsInput;
}

export interface EventCreateWithoutMeetingsInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ReservationUpsertWithWhereUniqueWithoutAttendeeInput {
  where: ReservationWhereUniqueInput;
  update: ReservationUpdateWithoutAttendeeDataInput;
  create: ReservationCreateWithoutAttendeeInput;
}

export interface StaffCreateWithoutMeetingsInput {
  id?: Maybe<ID_Input>;
  name: String;
  password: String;
  phoneNumber: String;
}

export interface ReservationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  timeSlot?: Maybe<String>;
  timeSlot_not?: Maybe<String>;
  timeSlot_in?: Maybe<String[] | String>;
  timeSlot_not_in?: Maybe<String[] | String>;
  timeSlot_lt?: Maybe<String>;
  timeSlot_lte?: Maybe<String>;
  timeSlot_gt?: Maybe<String>;
  timeSlot_gte?: Maybe<String>;
  timeSlot_contains?: Maybe<String>;
  timeSlot_not_contains?: Maybe<String>;
  timeSlot_starts_with?: Maybe<String>;
  timeSlot_not_starts_with?: Maybe<String>;
  timeSlot_ends_with?: Maybe<String>;
  timeSlot_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReservationScalarWhereInput[] | ReservationScalarWhereInput>;
  OR?: Maybe<ReservationScalarWhereInput[] | ReservationScalarWhereInput>;
  NOT?: Maybe<ReservationScalarWhereInput[] | ReservationScalarWhereInput>;
}

export interface AttendeeUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  reservations?: Maybe<ReservationUpdateManyWithoutAttendeeInput>;
}

export interface ReservationUpdateManyWithWhereNestedInput {
  where: ReservationScalarWhereInput;
  data: ReservationUpdateManyDataInput;
}

export interface ReservationUpdateWithWhereUniqueWithoutAttendeeInput {
  where: ReservationWhereUniqueInput;
  data: ReservationUpdateWithoutAttendeeDataInput;
}

export interface ReservationUpdateManyDataInput {
  timeSlot?: Maybe<String>;
}

export interface StaffSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StaffWhereInput>;
  AND?: Maybe<StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput>;
  OR?: Maybe<StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput>;
  NOT?: Maybe<StaffSubscriptionWhereInput[] | StaffSubscriptionWhereInput>;
}

export interface AttendeeUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface MeetingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeetingWhereInput>;
  AND?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  OR?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
  NOT?: Maybe<MeetingSubscriptionWhereInput[] | MeetingSubscriptionWhereInput>;
}

export interface MeetingScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  AND?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  OR?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  NOT?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
}

export interface StaffUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}

export interface MeetingUpsertWithWhereUniqueWithoutEventInput {
  where: MeetingWhereUniqueInput;
  update: MeetingUpdateWithoutEventDataInput;
  create: MeetingCreateWithoutEventInput;
}

export interface MeetingUpdateWithWhereUniqueWithoutStaffInput {
  where: MeetingWhereUniqueInput;
  data: MeetingUpdateWithoutStaffDataInput;
}

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  meetings?: Maybe<MeetingCreateManyWithoutEventInput>;
}

export type MeetingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MeetingCreateManyWithoutEventInput {
  create?: Maybe<
    MeetingCreateWithoutEventInput[] | MeetingCreateWithoutEventInput
  >;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
}

export type ReservationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface MeetingCreateWithoutEventInput {
  id?: Maybe<ID_Input>;
  name: String;
  location: String;
  staff?: Maybe<StaffCreateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeCreateManyInput>;
  reservations?: Maybe<ReservationCreateManyWithoutMeetingInput>;
}

export type StaffWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReservationCreateManyWithoutMeetingInput {
  create?: Maybe<
    | ReservationCreateWithoutMeetingInput[]
    | ReservationCreateWithoutMeetingInput
  >;
  connect?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
}

export interface MeetingCreateOneWithoutReservationsInput {
  create?: Maybe<MeetingCreateWithoutReservationsInput>;
  connect?: Maybe<MeetingWhereUniqueInput>;
}

export interface ReservationCreateWithoutMeetingInput {
  id?: Maybe<ID_Input>;
  attendee: AttendeeCreateOneWithoutReservationsInput;
  timeSlot: String;
}

export interface StaffCreateManyWithoutMeetingsInput {
  create?: Maybe<
    StaffCreateWithoutMeetingsInput[] | StaffCreateWithoutMeetingsInput
  >;
  connect?: Maybe<StaffWhereUniqueInput[] | StaffWhereUniqueInput>;
}

export interface AttendeeCreateOneWithoutReservationsInput {
  create?: Maybe<AttendeeCreateWithoutReservationsInput>;
  connect?: Maybe<AttendeeWhereUniqueInput>;
}

export interface ReservationUpdateManyWithoutAttendeeInput {
  create?: Maybe<
    | ReservationCreateWithoutAttendeeInput[]
    | ReservationCreateWithoutAttendeeInput
  >;
  delete?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  connect?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  set?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  disconnect?: Maybe<
    ReservationWhereUniqueInput[] | ReservationWhereUniqueInput
  >;
  update?: Maybe<
    | ReservationUpdateWithWhereUniqueWithoutAttendeeInput[]
    | ReservationUpdateWithWhereUniqueWithoutAttendeeInput
  >;
  upsert?: Maybe<
    | ReservationUpsertWithWhereUniqueWithoutAttendeeInput[]
    | ReservationUpsertWithWhereUniqueWithoutAttendeeInput
  >;
  deleteMany?: Maybe<
    ReservationScalarWhereInput[] | ReservationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ReservationUpdateManyWithWhereNestedInput[]
    | ReservationUpdateManyWithWhereNestedInput
  >;
}

export interface AttendeeCreateWithoutReservationsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
}

export interface MeetingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  event?: Maybe<EventWhereInput>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  staff_every?: Maybe<StaffWhereInput>;
  staff_some?: Maybe<StaffWhereInput>;
  staff_none?: Maybe<StaffWhereInput>;
  attendees_every?: Maybe<AttendeeWhereInput>;
  attendees_some?: Maybe<AttendeeWhereInput>;
  attendees_none?: Maybe<AttendeeWhereInput>;
  reservations_every?: Maybe<ReservationWhereInput>;
  reservations_some?: Maybe<ReservationWhereInput>;
  reservations_none?: Maybe<ReservationWhereInput>;
  AND?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  OR?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
  NOT?: Maybe<MeetingWhereInput[] | MeetingWhereInput>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  meetings?: Maybe<MeetingUpdateManyWithoutEventInput>;
}

export interface MeetingUpdateWithoutStaffDataInput {
  name?: Maybe<String>;
  event?: Maybe<EventUpdateOneRequiredWithoutMeetingsInput>;
  location?: Maybe<String>;
  attendees?: Maybe<AttendeeUpdateManyInput>;
  reservations?: Maybe<ReservationUpdateManyWithoutMeetingInput>;
}

export interface MeetingUpdateManyWithoutEventInput {
  create?: Maybe<
    MeetingCreateWithoutEventInput[] | MeetingCreateWithoutEventInput
  >;
  delete?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  connect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  set?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  disconnect?: Maybe<MeetingWhereUniqueInput[] | MeetingWhereUniqueInput>;
  update?: Maybe<
    | MeetingUpdateWithWhereUniqueWithoutEventInput[]
    | MeetingUpdateWithWhereUniqueWithoutEventInput
  >;
  upsert?: Maybe<
    | MeetingUpsertWithWhereUniqueWithoutEventInput[]
    | MeetingUpsertWithWhereUniqueWithoutEventInput
  >;
  deleteMany?: Maybe<MeetingScalarWhereInput[] | MeetingScalarWhereInput>;
  updateMany?: Maybe<
    | MeetingUpdateManyWithWhereNestedInput[]
    | MeetingUpdateManyWithWhereNestedInput
  >;
}

export interface StaffCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  meetings?: Maybe<MeetingCreateManyWithoutStaffInput>;
  password: String;
  phoneNumber: String;
}

export interface MeetingUpdateWithWhereUniqueWithoutEventInput {
  where: MeetingWhereUniqueInput;
  data: MeetingUpdateWithoutEventDataInput;
}

export interface MeetingCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  event: EventCreateOneWithoutMeetingsInput;
  location: String;
  staff?: Maybe<StaffCreateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeCreateManyInput>;
  reservations?: Maybe<ReservationCreateManyWithoutMeetingInput>;
}

export interface MeetingUpdateWithoutEventDataInput {
  name?: Maybe<String>;
  location?: Maybe<String>;
  staff?: Maybe<StaffUpdateManyWithoutMeetingsInput>;
  attendees?: Maybe<AttendeeUpdateManyInput>;
  reservations?: Maybe<ReservationUpdateManyWithoutMeetingInput>;
}

export interface EventCreateOneWithoutMeetingsInput {
  create?: Maybe<EventCreateWithoutMeetingsInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface ReservationUpdateManyWithoutMeetingInput {
  create?: Maybe<
    | ReservationCreateWithoutMeetingInput[]
    | ReservationCreateWithoutMeetingInput
  >;
  delete?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  connect?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  set?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
  disconnect?: Maybe<
    ReservationWhereUniqueInput[] | ReservationWhereUniqueInput
  >;
  update?: Maybe<
    | ReservationUpdateWithWhereUniqueWithoutMeetingInput[]
    | ReservationUpdateWithWhereUniqueWithoutMeetingInput
  >;
  upsert?: Maybe<
    | ReservationUpsertWithWhereUniqueWithoutMeetingInput[]
    | ReservationUpsertWithWhereUniqueWithoutMeetingInput
  >;
  deleteMany?: Maybe<
    ReservationScalarWhereInput[] | ReservationScalarWhereInput
  >;
  updateMany?: Maybe<
    | ReservationUpdateManyWithWhereNestedInput[]
    | ReservationUpdateManyWithWhereNestedInput
  >;
}

export interface ReservationUpdateWithoutAttendeeDataInput {
  meeting?: Maybe<MeetingUpdateOneRequiredWithoutReservationsInput>;
  timeSlot?: Maybe<String>;
}

export interface ReservationUpdateWithWhereUniqueWithoutMeetingInput {
  where: ReservationWhereUniqueInput;
  data: ReservationUpdateWithoutMeetingDataInput;
}

export interface StaffUpdateInput {
  name?: Maybe<String>;
  meetings?: Maybe<MeetingUpdateManyWithoutStaffInput>;
  password?: Maybe<String>;
  phoneNumber?: Maybe<String>;
}

export interface AttendeeUpsertWithoutReservationsInput {
  update: AttendeeUpdateWithoutReservationsDataInput;
  create: AttendeeCreateWithoutReservationsInput;
}

export interface AttendeeUpdateWithoutReservationsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface AttendeeUpdateOneRequiredWithoutReservationsInput {
  create?: Maybe<AttendeeCreateWithoutReservationsInput>;
  update?: Maybe<AttendeeUpdateWithoutReservationsDataInput>;
  upsert?: Maybe<AttendeeUpsertWithoutReservationsInput>;
  connect?: Maybe<AttendeeWhereUniqueInput>;
}

export interface ReservationUpdateWithoutMeetingDataInput {
  attendee?: Maybe<AttendeeUpdateOneRequiredWithoutReservationsInput>;
  timeSlot?: Maybe<String>;
}

export interface ReservationCreateInput {
  id?: Maybe<ID_Input>;
  attendee: AttendeeCreateOneWithoutReservationsInput;
  meeting: MeetingCreateOneWithoutReservationsInput;
  timeSlot: String;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface AttendeeCreateManyInput {
  create?: Maybe<AttendeeCreateInput[] | AttendeeCreateInput>;
  connect?: Maybe<AttendeeWhereUniqueInput[] | AttendeeWhereUniqueInput>;
}

export interface ReservationCreateManyWithoutAttendeeInput {
  create?: Maybe<
    | ReservationCreateWithoutAttendeeInput[]
    | ReservationCreateWithoutAttendeeInput
  >;
  connect?: Maybe<ReservationWhereUniqueInput[] | ReservationWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface StaffPreviousValues {
  id: ID_Output;
  name: String;
  password: String;
  phoneNumber: String;
}

export interface StaffPreviousValuesPromise
  extends Promise<StaffPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  phoneNumber: () => Promise<String>;
}

export interface StaffPreviousValuesSubscription
  extends Promise<AsyncIterator<StaffPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
}

export interface Meeting {
  id: ID_Output;
  name: String;
  location: String;
}

export interface MeetingPromise extends Promise<Meeting>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  event: <T = EventPromise>() => T;
  location: () => Promise<String>;
  staff: <T = FragmentableArray<Staff>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendees: <T = FragmentableArray<Attendee>>(args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reservations: <T = FragmentableArray<Reservation>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MeetingSubscription
  extends Promise<AsyncIterator<Meeting>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  event: <T = EventSubscription>() => T;
  location: () => Promise<AsyncIterator<String>>;
  staff: <T = Promise<AsyncIterator<StaffSubscription>>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendees: <T = Promise<AsyncIterator<AttendeeSubscription>>>(args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reservations: <T = Promise<AsyncIterator<ReservationSubscription>>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MeetingNullablePromise
  extends Promise<Meeting | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  event: <T = EventPromise>() => T;
  location: () => Promise<String>;
  staff: <T = FragmentableArray<Staff>>(args?: {
    where?: StaffWhereInput;
    orderBy?: StaffOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  attendees: <T = FragmentableArray<Attendee>>(args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  reservations: <T = FragmentableArray<Reservation>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReservationSubscriptionPayload {
  mutation: MutationType;
  node: Reservation;
  updatedFields: String[];
  previousValues: ReservationPreviousValues;
}

export interface ReservationSubscriptionPayloadPromise
  extends Promise<ReservationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReservationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReservationPreviousValuesPromise>() => T;
}

export interface ReservationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReservationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReservationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReservationPreviousValuesSubscription>() => T;
}

export interface AggregateAttendee {
  count: Int;
}

export interface AggregateAttendeePromise
  extends Promise<AggregateAttendee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendeeSubscription
  extends Promise<AsyncIterator<AggregateAttendee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttendeeEdge {
  node: Attendee;
  cursor: String;
}

export interface AttendeeEdgePromise
  extends Promise<AttendeeEdge>,
    Fragmentable {
  node: <T = AttendeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendeeEdgeSubscription
  extends Promise<AsyncIterator<AttendeeEdge>>,
    Fragmentable {
  node: <T = AttendeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface StaffSubscriptionPayload {
  mutation: MutationType;
  node: Staff;
  updatedFields: String[];
  previousValues: StaffPreviousValues;
}

export interface StaffSubscriptionPayloadPromise
  extends Promise<StaffSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StaffPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StaffPreviousValuesPromise>() => T;
}

export interface StaffSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StaffSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StaffSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StaffPreviousValuesSubscription>() => T;
}

export interface ReservationPreviousValues {
  id: ID_Output;
  timeSlot: String;
}

export interface ReservationPreviousValuesPromise
  extends Promise<ReservationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  timeSlot: () => Promise<String>;
}

export interface ReservationPreviousValuesSubscription
  extends Promise<AsyncIterator<ReservationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  timeSlot: () => Promise<AsyncIterator<String>>;
}

export interface StaffEdge {
  node: Staff;
  cursor: String;
}

export interface StaffEdgePromise extends Promise<StaffEdge>, Fragmentable {
  node: <T = StaffPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StaffEdgeSubscription
  extends Promise<AsyncIterator<StaffEdge>>,
    Fragmentable {
  node: <T = StaffSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReservation {
  count: Int;
}

export interface AggregateReservationPromise
  extends Promise<AggregateReservation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReservationSubscription
  extends Promise<AsyncIterator<AggregateReservation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Attendee {
  id: ID_Output;
  name: String;
  email: String;
}

export interface AttendeePromise extends Promise<Attendee>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  reservations: <T = FragmentableArray<Reservation>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttendeeSubscription
  extends Promise<AsyncIterator<Attendee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  reservations: <T = Promise<AsyncIterator<ReservationSubscription>>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttendeeNullablePromise
  extends Promise<Attendee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  reservations: <T = FragmentableArray<Reservation>>(args?: {
    where?: ReservationWhereInput;
    orderBy?: ReservationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ReservationConnection {
  pageInfo: PageInfo;
  edges: ReservationEdge[];
}

export interface ReservationConnectionPromise
  extends Promise<ReservationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReservationEdge>>() => T;
  aggregate: <T = AggregateReservationPromise>() => T;
}

export interface ReservationConnectionSubscription
  extends Promise<AsyncIterator<ReservationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReservationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReservationSubscription>() => T;
}

export interface AttendeeSubscriptionPayload {
  mutation: MutationType;
  node: Attendee;
  updatedFields: String[];
  previousValues: AttendeePreviousValues;
}

export interface AttendeeSubscriptionPayloadPromise
  extends Promise<AttendeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendeePreviousValuesPromise>() => T;
}

export interface AttendeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendeePreviousValuesSubscription>() => T;
}

export interface MeetingEdge {
  node: Meeting;
  cursor: String;
}

export interface MeetingEdgePromise extends Promise<MeetingEdge>, Fragmentable {
  node: <T = MeetingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeetingEdgeSubscription
  extends Promise<AsyncIterator<MeetingEdge>>,
    Fragmentable {
  node: <T = MeetingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttendeePreviousValues {
  id: ID_Output;
  name: String;
  email: String;
}

export interface AttendeePreviousValuesPromise
  extends Promise<AttendeePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface AttendeePreviousValuesSubscription
  extends Promise<AsyncIterator<AttendeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AttendeeConnection {
  pageInfo: PageInfo;
  edges: AttendeeEdge[];
}

export interface AttendeeConnectionPromise
  extends Promise<AttendeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendeeEdge>>() => T;
  aggregate: <T = AggregateAttendeePromise>() => T;
}

export interface AttendeeConnectionSubscription
  extends Promise<AsyncIterator<AttendeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendeeSubscription>() => T;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface AggregateStaff {
  count: Int;
}

export interface AggregateStaffPromise
  extends Promise<AggregateStaff>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStaffSubscription
  extends Promise<AsyncIterator<AggregateStaff>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventPreviousValues {
  id: ID_Output;
  name: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ReservationEdge {
  node: Reservation;
  cursor: String;
}

export interface ReservationEdgePromise
  extends Promise<ReservationEdge>,
    Fragmentable {
  node: <T = ReservationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReservationEdgeSubscription
  extends Promise<AsyncIterator<ReservationEdge>>,
    Fragmentable {
  node: <T = ReservationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MeetingConnection {
  pageInfo: PageInfo;
  edges: MeetingEdge[];
}

export interface MeetingConnectionPromise
  extends Promise<MeetingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeetingEdge>>() => T;
  aggregate: <T = AggregateMeetingPromise>() => T;
}

export interface MeetingConnectionSubscription
  extends Promise<AsyncIterator<MeetingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeetingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeetingSubscription>() => T;
}

export interface Event {
  id: ID_Output;
  name: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  meetings: <T = Promise<AsyncIterator<MeetingSubscription>>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MeetingPreviousValues {
  id: ID_Output;
  name: String;
  location: String;
}

export interface MeetingPreviousValuesPromise
  extends Promise<MeetingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  location: () => Promise<String>;
}

export interface MeetingPreviousValuesSubscription
  extends Promise<AsyncIterator<MeetingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
}

export interface MeetingSubscriptionPayload {
  mutation: MutationType;
  node: Meeting;
  updatedFields: String[];
  previousValues: MeetingPreviousValues;
}

export interface MeetingSubscriptionPayloadPromise
  extends Promise<MeetingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeetingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeetingPreviousValuesPromise>() => T;
}

export interface MeetingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeetingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeetingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeetingPreviousValuesSubscription>() => T;
}

export interface Staff {
  id: ID_Output;
  name: String;
  password: String;
  phoneNumber: String;
}

export interface StaffPromise extends Promise<Staff>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  phoneNumber: () => Promise<String>;
}

export interface StaffSubscription
  extends Promise<AsyncIterator<Staff>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  meetings: <T = Promise<AsyncIterator<MeetingSubscription>>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
}

export interface StaffNullablePromise
  extends Promise<Staff | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  meetings: <T = FragmentableArray<Meeting>>(args?: {
    where?: MeetingWhereInput;
    orderBy?: MeetingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  phoneNumber: () => Promise<String>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeeting {
  count: Int;
}

export interface AggregateMeetingPromise
  extends Promise<AggregateMeeting>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeetingSubscription
  extends Promise<AsyncIterator<AggregateMeeting>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StaffConnection {
  pageInfo: PageInfo;
  edges: StaffEdge[];
}

export interface StaffConnectionPromise
  extends Promise<StaffConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StaffEdge>>() => T;
  aggregate: <T = AggregateStaffPromise>() => T;
}

export interface StaffConnectionSubscription
  extends Promise<AsyncIterator<StaffConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StaffEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStaffSubscription>() => T;
}

export interface Reservation {
  id: ID_Output;
  timeSlot: String;
}

export interface ReservationPromise extends Promise<Reservation>, Fragmentable {
  id: () => Promise<ID_Output>;
  attendee: <T = AttendeePromise>() => T;
  meeting: <T = MeetingPromise>() => T;
  timeSlot: () => Promise<String>;
}

export interface ReservationSubscription
  extends Promise<AsyncIterator<Reservation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attendee: <T = AttendeeSubscription>() => T;
  meeting: <T = MeetingSubscription>() => T;
  timeSlot: () => Promise<AsyncIterator<String>>;
}

export interface ReservationNullablePromise
  extends Promise<Reservation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attendee: <T = AttendeePromise>() => T;
  meeting: <T = MeetingPromise>() => T;
  timeSlot: () => Promise<String>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Meeting",
    embedded: false
  },
  {
    name: "Reservation",
    embedded: false
  },
  {
    name: "Staff",
    embedded: false
  },
  {
    name: "Attendee",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
